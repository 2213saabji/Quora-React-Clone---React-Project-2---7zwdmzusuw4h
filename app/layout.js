'use client'
import './globals.css'
import './(styles)/navbar.css'
import './(styles)/login.css'
import { useContext, createContext, useState, useEffect, useRef } from 'react'
import { Inter } from 'next/font/google'
import Navbar from "./(navbar)/navbar"
import { Box } from "@mui/material"
import { crossicon, globalicon, imagesicon } from './(navbar)/constant'
const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

const MyContext = createContext();

export function allContext() {
  return useContext(MyContext);
}

export default function RootLayout({ children }) {
  const inputpicuploader=useRef();
  const outerDivImageSelector=useRef();
  const [theme, settheme] = useState("light");
  const [logintoken, setlogintoken] = useState(false);
  const [blackscreen2, setblackscreen2] = useState(true);
  const [loader, setloader] = useState(false);
  const [activePostOrQueDiv, setactivePostOrQueDiv] = useState(true)
  const [uppercase,setuppercase]=useState(false);

  const handleFileSelection = (event) => {
    const file = event.target.files[0];
    if (file) {
        const fileType = file.type;
        if (fileType.startsWith('image/')) {
            const imgElement = document.createElement('img');
            imgElement.src = URL.createObjectURL(file);
            let outerDiv = outerDivImageSelector.current;
            outerDiv.innerHTML="";
            imgElement.classList.add("attachedimage")
            outerDiv.classList.add("attachedimage");
            outerDiv.appendChild(imgElement);
            console.log(imgElement.src);
        }
    }
};

  function imagepicker(){
    inputpicuploader.current.click();
  }

  function themecheck(val1, val2) {
    return theme === "light" ? val1 : val2
  }

  function closepopups() {
    setblackscreen2(false);
  }

  useEffect(() => {
    if (typeof (localStorage.getItem("token")) == "string") {
      setlogintoken(true);
    }
    if (!localStorage.getItem("theme")) {
      localStorage.setItem("theme", "light");
    }
    else {
      settheme(localStorage.getItem("theme"));
    }
  }, [])
  return (
    <html lang="en">
      <body className={inter.className}>

        <MyContext.Provider value={{
          theme, settheme,
          logintoken, setlogintoken,
          loader, setloader,
          blackscreen2, setblackscreen2,
          themecheck,
        }}>
          <Box className={`wholewebsiteMaindiv ${themecheck("bklightwhite", "bkblack")} posfix`} sx={{ width: "100%", display: "flex", alignItems: "center", flexDirection: "column", position: "relative" }}>
            <Box className={`${themecheck("boxshadowlgray", "boxshadowblack")} ${themecheck("bkwhite", "bklightblack")}`} sx={{ zIndex: "1000", width: "100%", display: "flex", justifyContent: "center" }}>
              <Box sx={{ maxWidth: "1250px", width: "100%" }}>
                <Navbar />
              </Box>
            </Box>
            <Box sx={{ maxWidth: "1250px", width: "100%" }} className={`mt20 ${logintoken ? "posfix" : ""}`} >
              {children}
            </Box>
            {blackscreen2 && <div className={`blackscreen2 flexja`} onClick={() => { closepopups() }}>
              <div className={`createPostDiv flex flexc brdr-r12 ${themecheck("bkwhite", "bklightblack")}`} onClick={(e) => { e.stopPropagation() }}>
                <div className={`mt20 flexa`}>
                  <div className={`ml20 csrpntr`} onClick={() => { setblackscreen2(false) }}>{crossicon}</div>
                  <div className={`flexja w100per`}>
                    <p className={`flexa g5 ${themecheck("txt8", "txt7")}`}>{globalicon} Everyone</p>
                  </div>
                </div>
                <div className={`activePostOrQueDiv mt30 brdrb1 flexja ${themecheck("brdrlightgray", "brdrllgray")}`}>
                  <div className={`flexja w100per p10 csrpntr  ${themecheck("txt8", "txt7")} ${activePostOrQueDiv ? "brdrbottom" : ""}`} onClick={() => { setactivePostOrQueDiv(true) }}>Add Question</div>
                  <div className={`flexja w100per p10 csrpntr  ${themecheck("txt8", "txt7")} ${activePostOrQueDiv ? "" : "brdrbottom"}`} onClick={() => { setactivePostOrQueDiv(false) }}>Create Post</div>
                </div>



                {activePostOrQueDiv && <div className={`w100per `}>add question</div>}




                {!activePostOrQueDiv && <div className={`w100per createpostdiv flex flexc fgrow1 brdr-r12`}>
                <div className={`flexa mt10 mb10`}>
                <h2 className={`userlogo ml10 w500 flexja ${themecheck("bkgray", "bklightgray")} ${themecheck("txt7", "txt8")}`}>{JSON.parse(localStorage.getItem("userdetails")).name.charAt(0)}</h2>
                <h3 className={`w500 pl10 pr20 ${themecheck("brdrwdth1", "brdrwdth1")} ${themecheck("txt8", "txt7")}`}>{JSON.parse(localStorage.getItem("userdetails")).email}</h3>
                </div>
                <div className={`fgrow1 createPostTextareaOuterDiv`}><textarea rows={4} className={`w100per pl10 pr10 pt10 h100per ${uppercase?"uppercase":""}`} placeholder='Say something...'/> </div>
                <div className={`flexa flexjsb createpostdowndiv pr10 pl10 brdrt1 ${themecheck("brdrlightgray", "brdrllgray")}`}>
                <div className={`flexa`}><div className={`fnt20 w600 mr10 csrpntr ${themecheck("txt5", "txt1")}`} onClick={()=>{setuppercase(!uppercase)}}>Aa</div>
                <div className={`csrpntr flex`} onClick={()=>{imagepicker()}} >{imagesicon}<input type='file' ref={inputpicuploader} style={{display:"none"}} onChange={handleFileSelection}/><div ref={outerDivImageSelector}></div></div></div>
                <button className={`bkpureblue pt10 pb10 pl30 pr30 brdr-r50 w500 fnt15 txt7 csrpntr `}>Post</button>
                </div>
                </div>}
              </div>
            </div>}
          </Box>
        </MyContext.Provider>
      </body>
    </html>
  )
}
